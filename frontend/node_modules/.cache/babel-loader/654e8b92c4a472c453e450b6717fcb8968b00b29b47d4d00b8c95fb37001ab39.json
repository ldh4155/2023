{"ast":null,"code":"import axios from \"axios\";\nimport { refreshAccessToken } from \"./reissue\";\nexport const api = axios.create({\n  baseURL: `http://localhost:8080/`\n});\nlet refreshTokenPromise = null; // 재발급 요청 상태를 추적하는 변수\n\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access\");\n  if (token) {\n    config.headers[\"access\"] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// //access token 재발급 후 저장\n// export const refreshAccessToken = async () => {\n\n//   try {\n//     const response = await api.post(`reissue`, {}, { withCredentials: true });\n//     const accessToken = response.headers[\"access\"];\n//     localStorage.setItem(\"access\", accessToken);\n//   } catch (error) {\n//     console.error(error.response.status);\n//     const response = await api.post(`signout`, {}, { withCredentials: true });\n//       //토큰 제거\n//       localStorage.removeItem('access');\n//       // 로그인페이지로 리디렉션\n//   }\n// };\n\n// api.interceptors.response.use(\n//   response => {\n//     return response;\n//   },\n//   async error => {\n//     const originalRequest = error.config;\n//     if (error.response.status === 401 && !originalRequest._retry) {\n\n//       localStorage.removeItem('access');\n//       console.log(\"원래 요청:\", originalRequest);\n//       originalRequest._retry = true;\n//       try {\n//         await refreshAccessToken();\n//         const newAccessToken = localStorage.getItem('access');\n//         api.defaults.headers.common['access'] = newAccessToken;\n//         console.log(\"새로운 토큰으로 재요청:\", originalRequest);\n//         originalRequest.headers['access'] = newAccessToken;  // 여기서 헤더를 직접 설정\n//         return api(originalRequest);\n//       } catch (refreshError) {\n//         console.log(\"재발급 중 오류 발생:\", refreshError);\n//         return Promise.reject(refreshError);\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    console.log(\"401 에러로 재발급 시도\");\n    if (!refreshTokenPromise) {\n      // 재발급 요청이 없다면 새로 시작\n      refreshTokenPromise = refreshAccessToken().then(newAccessToken => {\n        refreshTokenPromise = null; // 요청 완료 후 상태 초기화\n        if (newAccessToken) {\n          localStorage.setItem('access', newAccessToken);\n          api.defaults.headers.common['access'] = newAccessToken;\n          return newAccessToken;\n        }\n      }).catch(error => {\n        refreshTokenPromise = null; // 오류 시 상태 초기화\n        return Promise.reject(error);\n      });\n    }\n    return refreshTokenPromise.then(newAccessToken => {\n      originalRequest._retry = true;\n      originalRequest.headers['access'] = newAccessToken;\n      return api(originalRequest);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","refreshAccessToken","api","create","baseURL","refreshTokenPromise","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","console","log","then","newAccessToken","setItem","defaults","common","catch"],"sources":["C:/Users/user/2023TeamProject/graduate/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { refreshAccessToken } from \"./reissue\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: `http://localhost:8080/`,\r\n});\r\n\r\nlet refreshTokenPromise = null; // 재발급 요청 상태를 추적하는 변수\r\n\r\napi.interceptors.request.use(\r\nconfig => {\r\n  const token = localStorage.getItem(\"access\");\r\n  if (token) {\r\n    config.headers[\"access\"] = token; \r\n  }\r\n  return config;\r\n},\r\nerror => {\r\n  return Promise.reject(error);\r\n}\r\n);\r\n\r\n// //access token 재발급 후 저장\r\n// export const refreshAccessToken = async () => {\r\n\r\n//   try {\r\n//     const response = await api.post(`reissue`, {}, { withCredentials: true });\r\n//     const accessToken = response.headers[\"access\"];\r\n//     localStorage.setItem(\"access\", accessToken);\r\n//   } catch (error) {\r\n//     console.error(error.response.status);\r\n//     const response = await api.post(`signout`, {}, { withCredentials: true });\r\n//       //토큰 제거\r\n//       localStorage.removeItem('access');\r\n//       // 로그인페이지로 리디렉션\r\n//   }\r\n// };\r\n\r\n// api.interceptors.response.use(\r\n//   response => {\r\n//     return response;\r\n//   },\r\n//   async error => {\r\n//     const originalRequest = error.config;\r\n//     if (error.response.status === 401 && !originalRequest._retry) {\r\n      \r\n//       localStorage.removeItem('access');\r\n//       console.log(\"원래 요청:\", originalRequest);\r\n//       originalRequest._retry = true;\r\n//       try {\r\n//         await refreshAccessToken();\r\n//         const newAccessToken = localStorage.getItem('access');\r\n//         api.defaults.headers.common['access'] = newAccessToken;\r\n//         console.log(\"새로운 토큰으로 재요청:\", originalRequest);\r\n//         originalRequest.headers['access'] = newAccessToken;  // 여기서 헤더를 직접 설정\r\n//         return api(originalRequest);\r\n//       } catch (refreshError) {\r\n//         console.log(\"재발급 중 오류 발생:\", refreshError);\r\n//         return Promise.reject(refreshError);\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\napi.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  async error => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      console.log(\"401 에러로 재발급 시도\");\r\n      if (!refreshTokenPromise) { // 재발급 요청이 없다면 새로 시작\r\n        refreshTokenPromise = refreshAccessToken().then(newAccessToken => {\r\n          refreshTokenPromise = null; // 요청 완료 후 상태 초기화\r\n          if (newAccessToken) {\r\n            localStorage.setItem('access', newAccessToken);\r\n            api.defaults.headers.common['access'] = newAccessToken;\r\n            return newAccessToken;\r\n          }\r\n        }).catch(error => {\r\n          refreshTokenPromise = null; // 오류 시 상태 초기화\r\n          return Promise.reject(error);\r\n        });\r\n      }\r\n      \r\n      return refreshTokenPromise.then(newAccessToken => {\r\n        originalRequest._retry = true;\r\n        originalRequest.headers['access'] = newAccessToken; \r\n        return api(originalRequest);\r\n      }).catch(error => {\r\n        return Promise.reject(error);\r\n      });\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,WAAW;AAE9C,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,OAAO,EAAG;AACZ,CAAC,CAAC;AAEF,IAAIC,mBAAmB,GAAG,IAAI,CAAC,CAAC;;AAEhCH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC5C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,QAAQ,CAAC,GAAGH,KAAK;EAClC;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC3BS,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAMH,KAAK,IAAI;EACb,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EACpC,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,IAAI,CAACjB,mBAAmB,EAAE;MAAE;MAC1BA,mBAAmB,GAAGJ,kBAAkB,CAAC,CAAC,CAACsB,IAAI,CAACC,cAAc,IAAI;QAChEnB,mBAAmB,GAAG,IAAI,CAAC,CAAC;QAC5B,IAAImB,cAAc,EAAE;UAClBb,YAAY,CAACc,OAAO,CAAC,QAAQ,EAAED,cAAc,CAAC;UAC9CtB,GAAG,CAACwB,QAAQ,CAACb,OAAO,CAACc,MAAM,CAAC,QAAQ,CAAC,GAAGH,cAAc;UACtD,OAAOA,cAAc;QACvB;MACF,CAAC,CAAC,CAACI,KAAK,CAACd,KAAK,IAAI;QAChBT,mBAAmB,GAAG,IAAI,CAAC,CAAC;QAC5B,OAAOU,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;MAC9B,CAAC,CAAC;IACJ;IAEA,OAAOT,mBAAmB,CAACkB,IAAI,CAACC,cAAc,IAAI;MAChDN,eAAe,CAACE,MAAM,GAAG,IAAI;MAC7BF,eAAe,CAACL,OAAO,CAAC,QAAQ,CAAC,GAAGW,cAAc;MAClD,OAAOtB,GAAG,CAACgB,eAAe,CAAC;IAC7B,CAAC,CAAC,CAACU,KAAK,CAACd,KAAK,IAAI;MAChB,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CAAC,CAAC;EACJ;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
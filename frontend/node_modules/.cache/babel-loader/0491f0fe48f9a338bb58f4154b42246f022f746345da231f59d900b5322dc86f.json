{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\2023TeamProject\\\\graduate\\\\frontend\\\\src\\\\components\\\\ImageList.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MediaList = ({\n  imageUrls\n}) => {\n  // 파일 확장자를 기준으로 미디어 타입을 결정하는 함수\n  const renderMedia = (url, index) => {\n    const extension = url.split(\".\").pop();\n    if ([\"mp4\", \"avi\", \"mov\"].includes(extension)) {\n      return /*#__PURE__*/_jsxDEV(\"video\", {\n        controls: true,\n        style: {\n          width: \"300px\",\n          height: \"300px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: url,\n          type: `video/${extension}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }, this), \"\\uBE44\\uB514\\uC624\\uB97C \\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uBE0C\\uB77C\\uC6B0\\uC800\\uC785\\uB2C8\\uB2E4.\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this);\n    } else if ([\"png\", \"jpg\", \"jpeg\", \"gif\"].includes(extension)) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: `Media ${index}`,\n        style: {\n          width: \"300px\",\n          height: \"auto\"\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uD30C\\uC77C \\uD615\\uC2DD\\uC785\\uB2C8\\uB2E4.\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: imageUrls && imageUrls.length > 0 ? imageUrls.map((url, index) => renderMedia(url, index)) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = MediaList;\nexport default MediaList;\nvar _c;\n$RefreshReg$(_c, \"MediaList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MediaList","imageUrls","renderMedia","url","index","extension","split","pop","includes","controls","style","width","height","children","src","type","fileName","_jsxFileName","lineNumber","columnNumber","alt","length","map","_c","$RefreshReg$"],"sources":["C:/Users/user/2023TeamProject/graduate/frontend/src/components/ImageList.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst MediaList = ({ imageUrls }) => {\r\n  // 파일 확장자를 기준으로 미디어 타입을 결정하는 함수\r\n  const renderMedia = (url, index) => {\r\n    const extension = url.split(\".\").pop();\r\n    if ([\"mp4\", \"avi\", \"mov\"].includes(extension)) {\r\n      return (\r\n        <video key={index} controls style={{ width: \"300px\", height: \"300px\" }}>\r\n          <source src={url} type={`video/${extension}`} />\r\n          비디오를 지원하지 않는 브라우저입니다.\r\n        </video>\r\n      );\r\n    } else if ([\"png\", \"jpg\", \"jpeg\", \"gif\"].includes(extension)) {\r\n      return (\r\n        <img\r\n          key={index}\r\n          src={url}\r\n          alt={`Media ${index}`}\r\n          style={{ width: \"300px\", height: \"auto\" }}\r\n        />\r\n      );\r\n    } else {\r\n      return <div key={index}>지원하지 않는 파일 형식입니다.</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {imageUrls && imageUrls.length > 0 ? (\r\n        imageUrls.map((url, index) => renderMedia(url, index))\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MediaList;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EACnC;EACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;IAClC,MAAMC,SAAS,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;IACtC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAACC,QAAQ,CAACH,SAAS,CAAC,EAAE;MAC7C,oBACEN,OAAA;QAAmBU,QAAQ;QAACC,KAAK,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAQ,CAAE;QAAAC,QAAA,gBACrEd,OAAA;UAAQe,GAAG,EAAEX,GAAI;UAACY,IAAI,EAAG,SAAQV,SAAU;QAAE;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,8GAElD;MAAA,GAHYf,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CAAC;IAEZ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAACX,QAAQ,CAACH,SAAS,CAAC,EAAE;MAC5D,oBACEN,OAAA;QAEEe,GAAG,EAAEX,GAAI;QACTiB,GAAG,EAAG,SAAQhB,KAAM,EAAE;QACtBM,KAAK,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAO;MAAE,GAHrCR,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CAAC;IAEN,CAAC,MAAM;MACL,oBAAOpB,OAAA;QAAAc,QAAA,EAAiB;MAAiB,GAAxBT,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAwB,CAAC;IACjD;EACF,CAAC;EAED,oBACEpB,OAAA;IAAAc,QAAA,EACGZ,SAAS,IAAIA,SAAS,CAACoB,MAAM,GAAG,CAAC,GAChCpB,SAAS,CAACqB,GAAG,CAAC,CAACnB,GAAG,EAAEC,KAAK,KAAKF,WAAW,CAACC,GAAG,EAAEC,KAAK,CAAC,CAAC,gBAEtDL,OAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU;EACX;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACI,EAAA,GAlCIvB,SAAS;AAoCf,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
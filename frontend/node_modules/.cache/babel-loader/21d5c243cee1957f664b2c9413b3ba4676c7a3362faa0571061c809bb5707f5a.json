{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\2023TeamProject\\\\graduate\\\\frontend\\\\src\\\\page\\\\sign\\\\SignUp.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { debounce } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignUp = () => {\n  _s();\n  const [member, setMember] = useState();\n  const [memberId, setMemberId] = useState();\n  const [password, setPassword] = useState();\n  const [idMessage, setIdMessage] = useState(\"\");\n  useEffect(() => {\n    const fetchMemberStructure = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/memberStructure');\n        const nullifiedData = Object.keys(response.data).reduce((acc, key) => ({\n          ...acc,\n          [key]: null\n        }), {});\n        setMember(nullifiedData);\n      } catch (error) {\n        console.error('Failed to fetch member structure', error);\n      }\n    };\n    fetchMemberStructure();\n  }, []);\n\n  //1초동안 입력 없는 경우 get 보내서 중복 체크\n  const checkId = debounce(async id => {\n    //정규식 검사\n    const regex = /^[a-zA-Z0-9]{4,10}$/; // 예: 영문자와 숫자로 이루어진 4자 이상의 아이디\n    if (!regex.test(id)) {\n      setIdMessage(\"영문자와 숫자로 이루어진 4~10자이내\");\n      return;\n    }\n    //중복 체크\n    try {\n      const response = await axios.get(`http://localhost:8080/signup?id=${id}`);\n      if (!response.data) setIdMessage(\"사용할 수 있는 아이디\");else setIdMessage(\"사용할 수 없는 아이디\");\n    } catch (error) {}\n  }, 1000);\n  const changeMemberId = e => {\n    const {\n      value\n    } = e.target;\n    setMember(prevMember => ({\n      ...prevMember,\n      memberId: value\n    }));\n    checkId(value);\n  };\n  const changePassword = e => {\n    const {\n      value\n    } = e.target;\n    setMember(prevMember => ({\n      ...prevMember,\n      password: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      console.log(member);\n      const response = await axios.post('http://localhost:8080/signup', member);\n      if (response.data.success) {\n        alert('가입에 성공하였습니다!');\n      } else {\n        alert('가입에 실패하였습니다. 다시 시도해주세요.');\n      }\n    } catch (error) {\n      console.error('Failed to sign up', error);\n      alert('가입에 실패하였습니다. 다시 시도해주세요.');\n    }\n    window.location.href = '/';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"id\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          value: memberId,\n          onChange: changeMemberId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: idMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          value: password,\n          onChange: changePassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(SignUp, \"SxnwWToVYWGEpWoxdq/35OIXf4c=\");\n_c = SignUp;\nexport default SignUp;\nvar _c;\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"names":["React","useEffect","useState","axios","debounce","jsxDEV","_jsxDEV","SignUp","_s","member","setMember","memberId","setMemberId","password","setPassword","idMessage","setIdMessage","fetchMemberStructure","response","get","nullifiedData","Object","keys","data","reduce","acc","key","error","console","checkId","id","regex","test","changeMemberId","e","value","target","prevMember","changePassword","handleSubmit","preventDefault","log","post","success","alert","window","location","href","children","onSubmit","type","required","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/2023TeamProject/graduate/frontend/src/page/sign/SignUp.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { debounce } from 'lodash';\nconst SignUp = () => {\n    const [member, setMember] = useState();\n    const [memberId, setMemberId] = useState();\n    const [password, setPassword] = useState();\n    const [idMessage, setIdMessage] = useState(\"\");\n    useEffect(() => {\n        const fetchMemberStructure = async () => {\n            try {\n                const response = await axios.get('http://localhost:8080/memberStructure');\n                const nullifiedData = Object.keys(response.data).reduce((acc, key) => ({ ...acc, [key]: null }), {});\n                setMember(nullifiedData);\n            } catch (error) {\n                console.error('Failed to fetch member structure', error);\n            }\n        };\n    \n        fetchMemberStructure();\n    }, []);\n    \n    //1초동안 입력 없는 경우 get 보내서 중복 체크\n    const checkId = debounce(async (id) => {\n        //정규식 검사\n        const regex = /^[a-zA-Z0-9]{4,10}$/;  // 예: 영문자와 숫자로 이루어진 4자 이상의 아이디\n        if (!regex.test(id)) {\n            setIdMessage(\"영문자와 숫자로 이루어진 4~10자이내\");\n            return;\n        }\n        //중복 체크\n        try {\n            const response = await axios.get(`http://localhost:8080/signup?id=${id}`)\n            if(!response.data)\n                setIdMessage(\"사용할 수 있는 아이디\");\n            else\n                setIdMessage(\"사용할 수 없는 아이디\");\n        } catch (error) {\n\n        }\n    }, 1000);\n\n    const changeMemberId = (e) => {\n        const {value} = e.target;\n        setMember(prevMember => ({ ...prevMember, memberId: value }));\n        checkId(value);\n    };\n    \n    const changePassword = (e) => {\n        const {value} = e.target;\n        setMember(prevMember => ({ ...prevMember, password: value }));\n    };\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            console.log(member);\n            const response = await axios.post('http://localhost:8080/signup', member);\n            if (response.data.success) {\n                alert('가입에 성공하였습니다!');\n            } else {\n                alert('가입에 실패하였습니다. 다시 시도해주세요.');\n            }\n        } catch (error) {\n            console.error('Failed to sign up', error);\n            alert('가입에 실패하였습니다. 다시 시도해주세요.');\n        }\n        window.location.href = '/';\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <p>id<input type=\"text\" required={true} value={memberId} onChange={changeMemberId}></input></p>\n                <p>{idMessage}</p>\n                <p>password<input type=\"text\" required={true} value={password} onChange={changePassword}></input></p>\n                <button type=\"submit\">가입</button>\n            </form>\n        </div>\n    )\n\n}\nexport default SignUp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
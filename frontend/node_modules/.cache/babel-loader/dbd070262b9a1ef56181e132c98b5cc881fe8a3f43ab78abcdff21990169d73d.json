{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nexport const api = axios.create({\n  baseURL: `http://localhost:8080/`\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access\");\n  if (token) {\n    config.headers[\"access\"] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n//access token 재발급 후 저장\nconst refreshAccessToken = async () => {\n  _s();\n  const navigate = useNavigate();\n  try {\n    const response = await api.post(`reissue`, {}, {\n      withCredentials: true\n    });\n    const accessToken = response.headers[\"access\"];\n    localStorage.setItem(\"access\", accessToken);\n  } catch (error) {}\n};\n_s(refreshAccessToken, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    await refreshAccessToken();\n    api.defaults.headers.common['Access'] = localStorage.getItem('access');\n    return api(originalRequest);\n  }\n  return Promise.reject(error);\n});\n\n// // 인증 토큰을 설정하는 함수\n// export function setAuthToken() {\n\n//     const token = localStorage.getItem(\"access\");\n//     if (token) {  \n//         if(token.startsWith(\"Bearer \")) {\n//             api.defaults.headers.common['access'] = `${token}`;      \n//         } else {\n//             api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n//           }\n//       // 모든 요청의 Authorization 헤더에 토큰 추가\n\n//     } else {\n//       // 토큰이 없으면 Authorization 헤더 삭제\n//       delete api.defaults.headers.common['Authorization'];\n//     }\n//   }","map":{"version":3,"names":["axios","useNavigate","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","refreshAccessToken","_s","navigate","response","post","withCredentials","accessToken","setItem","originalRequest","status","_retry","defaults","common"],"sources":["C:/Users/user/2023TeamProject/graduate/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: `http://localhost:8080/`,\r\n});\r\n\r\napi.interceptors.request.use(\r\nconfig => {\r\n  const token = localStorage.getItem(\"access\");\r\n  if (token) {\r\n    config.headers[\"access\"] = token; \r\n  }\r\n  return config;\r\n},\r\nerror => {\r\n  return Promise.reject(error);\r\n}\r\n);\r\n\r\n//access token 재발급 후 저장\r\nconst refreshAccessToken = async () => {\r\n  const navigate = useNavigate();\r\ntry {\r\n  const response = await api.post(`reissue`, {}, { withCredentials: true });\r\n  const accessToken = response.headers[\"access\"];\r\n  localStorage.setItem(\"access\", accessToken);\r\n} catch (error) {\r\n  \r\n}\r\n};\r\n\r\napi.interceptors.response.use(\r\nresponse => {\r\n  return response;\r\n},\r\nasync error => {\r\n  const originalRequest = error.config;\r\n  if (error.response.status === 401 && !originalRequest._retry) {\r\n    originalRequest._retry = true;\r\n    await refreshAccessToken();\r\n    api.defaults.headers.common['Access'] = localStorage.getItem('access');\r\n    return api(originalRequest);\r\n  }\r\n  return Promise.reject(error);\r\n}\r\n);\r\n\r\n\r\n// // 인증 토큰을 설정하는 함수\r\n// export function setAuthToken() {\r\n\r\n//     const token = localStorage.getItem(\"access\");\r\n//     if (token) {  \r\n//         if(token.startsWith(\"Bearer \")) {\r\n//             api.defaults.headers.common['access'] = `${token}`;      \r\n//         } else {\r\n//             api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n//           }\r\n//       // 모든 요청의 Authorization 헤더에 토큰 추가\r\n      \r\n//     } else {\r\n//       // 토큰이 없으면 Authorization 헤더 삭제\r\n//       delete api.defaults.headers.common['Authorization'];\r\n//     }\r\n//   }\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,OAAO,EAAG;AACZ,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC5C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,QAAQ,CAAC,GAAGH,KAAK;EAClC;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACA,CAAC;;AAED;AACA,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EACrC,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAChC,IAAI;IACF,MAAMkB,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAE,SAAQ,EAAE,CAAC,CAAC,EAAE;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC;IACzE,MAAMC,WAAW,GAAGH,QAAQ,CAACP,OAAO,CAAC,QAAQ,CAAC;IAC9CF,YAAY,CAACa,OAAO,CAAC,QAAQ,EAAED,WAAW,CAAC;EAC7C,CAAC,CAAC,OAAOT,KAAK,EAAE,CAEhB;AACA,CAAC;AAACI,EAAA,CATID,kBAAkB;EAAA,QACLf,WAAW;AAAA;AAU9BC,GAAG,CAACG,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC7BY,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAMN,KAAK,IAAI;EACb,MAAMW,eAAe,GAAGX,KAAK,CAACL,MAAM;EACpC,IAAIK,KAAK,CAACM,QAAQ,CAACM,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMV,kBAAkB,CAAC,CAAC;IAC1Bd,GAAG,CAACyB,QAAQ,CAACf,OAAO,CAACgB,MAAM,CAAC,QAAQ,CAAC,GAAGlB,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACtE,OAAOT,GAAG,CAACsB,eAAe,CAAC;EAC7B;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACA,CAAC;;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
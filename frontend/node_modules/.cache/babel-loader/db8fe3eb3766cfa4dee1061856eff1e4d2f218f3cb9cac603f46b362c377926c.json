{"ast":null,"code":"import axios from \"axios\";\nimport { refreshAccessToken } from \"./reissue\";\nexport const api = axios.create({\n  baseURL: `http://localhost:8080/`\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access\");\n  if (token) {\n    config.headers[\"access\"] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// //access token 재발급 후 저장\n// export const refreshAccessToken = async () => {\n\n//   try {\n//     const response = await api.post(`reissue`, {}, { withCredentials: true });\n//     const accessToken = response.headers[\"access\"];\n//     localStorage.setItem(\"access\", accessToken);\n//   } catch (error) {\n//     console.error(error.response.status);\n//     const response = await api.post(`signout`, {}, { withCredentials: true });\n//       //토큰 제거\n//       localStorage.removeItem('access');\n//       // 로그인페이지로 리디렉션\n//   }\n// };\n\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    console.log(\"401 에러로 재발급 시도\");\n    originalRequest._retry = true;\n    await refreshAccessToken();\n    api.defaults.headers.common['access'] = localStorage.getItem('access');\n    return api(originalRequest);\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","refreshAccessToken","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","console","log","defaults","common"],"sources":["C:/Users/user/2023TeamProject/graduate/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { refreshAccessToken } from \"./reissue\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: `http://localhost:8080/`,\r\n});\r\n\r\napi.interceptors.request.use(\r\nconfig => {\r\n  const token = localStorage.getItem(\"access\");\r\n  if (token) {\r\n    config.headers[\"access\"] = token; \r\n  }\r\n  return config;\r\n},\r\nerror => {\r\n  return Promise.reject(error);\r\n}\r\n);\r\n\r\n// //access token 재발급 후 저장\r\n// export const refreshAccessToken = async () => {\r\n\r\n//   try {\r\n//     const response = await api.post(`reissue`, {}, { withCredentials: true });\r\n//     const accessToken = response.headers[\"access\"];\r\n//     localStorage.setItem(\"access\", accessToken);\r\n//   } catch (error) {\r\n//     console.error(error.response.status);\r\n//     const response = await api.post(`signout`, {}, { withCredentials: true });\r\n//       //토큰 제거\r\n//       localStorage.removeItem('access');\r\n//       // 로그인페이지로 리디렉션\r\n//   }\r\n// };\r\n\r\napi.interceptors.response.use(\r\nresponse => {\r\n  return response;\r\n},\r\nasync error => {\r\n  const originalRequest = error.config;\r\n  if (error.response.status === 401 && !originalRequest._retry) {\r\n    console.log(\"401 에러로 재발급 시도\")\r\n    originalRequest._retry = true;\r\n    await refreshAccessToken();\r\n    api.defaults.headers.common['access'] = localStorage.getItem('access');\r\n    return api(originalRequest);\r\n\r\n  }\r\n  return Promise.reject(error);\r\n}\r\n);\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,WAAW;AAE9C,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,OAAO,EAAG;AACZ,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC5C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,QAAQ,CAAC,GAAGH,KAAK;EAClC;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,GAAG,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC7BS,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAMH,KAAK,IAAI;EACb,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EACpC,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7BJ,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMlB,kBAAkB,CAAC,CAAC;IAC1BC,GAAG,CAACoB,QAAQ,CAACV,OAAO,CAACW,MAAM,CAAC,QAAQ,CAAC,GAAGb,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACtE,OAAOT,GAAG,CAACe,eAAe,CAAC;EAE7B;EACA,OAAOH,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
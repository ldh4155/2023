{"ast":null,"code":"import { api } from \"./api\";\nexport const refreshAccessToken = async () => {\n  try {\n    console.log(\"재발급 요청\");\n    const response = await api.post(`reissue`, {}, {\n      withCredentials: true\n    });\n    console.log(\"재발급 성공\");\n    const accessToken = response.headers[\"access\"];\n    console.log(\"access\", accessToken);\n    if (!accessToken) {\n      throw new Error(\"Access token이 없습니다.\");\n    }\n    localStorage.setItem(\"access\", accessToken);\n  } catch (error) {\n    console.log(\"재발급 실패\");\n    localStorage.removeItem('access');\n    console.error(error.response ? error.response.status : error.message);\n    try {\n      await api.post(`signout`, {}, {\n        withCredentials: true\n      });\n    } catch (signoutError) {\n      console.error(\"로그아웃 실패\", signoutError);\n    }\n\n    // Custom event 발생\n    window.dispatchEvent(new CustomEvent(\"unauthorized\"));\n    throw error; // 중요한 부분: 오류를 던져서 상위에서 처리하게 함\n  }\n};","map":{"version":3,"names":["api","refreshAccessToken","console","log","response","post","withCredentials","accessToken","headers","Error","localStorage","setItem","error","removeItem","status","message","signoutError","window","dispatchEvent","CustomEvent"],"sources":["C:/Users/KNUser/Desktop/TeamProject/frontend/src/api/reissue.js"],"sourcesContent":["import { api } from \"./api\";\r\n\r\nexport const refreshAccessToken = async () => {\r\n  try {\r\n    console.log(\"재발급 요청\")\r\n    const response = await api.post(`reissue`, {}, { withCredentials: true }); \r\n    console.log(\"재발급 성공\")\r\n    const accessToken = response.headers[\"access\"];\r\n    console.log(\"access\", accessToken);\r\n    if (!accessToken) {\r\n      throw new Error(\"Access token이 없습니다.\");\r\n    }\r\n    localStorage.setItem(\"access\", accessToken);\r\n  } catch (error) {\r\n    console.log(\"재발급 실패\")\r\n    localStorage.removeItem('access');\r\n    console.error(error.response ? error.response.status : error.message);\r\n    try {\r\n      await api.post(`signout`, {}, { withCredentials: true });\r\n    } catch (signoutError) {\r\n      console.error(\"로그아웃 실패\", signoutError);\r\n    }\r\n\r\n    // Custom event 발생\r\n    window.dispatchEvent(new CustomEvent(\"unauthorized\"));\r\n    throw error; // 중요한 부분: 오류를 던져서 상위에서 처리하게 함\r\n  }\r\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAE3B,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAE,SAAQ,EAAE,CAAC,CAAC,EAAE;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC;IACzEJ,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,MAAMI,WAAW,GAAGH,QAAQ,CAACI,OAAO,CAAC,QAAQ,CAAC;IAC9CN,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEI,WAAW,CAAC;IAClC,IAAI,CAACA,WAAW,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,qBAAqB,CAAC;IACxC;IACAC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEJ,WAAW,CAAC;EAC7C,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdV,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrBO,YAAY,CAACG,UAAU,CAAC,QAAQ,CAAC;IACjCX,OAAO,CAACU,KAAK,CAACA,KAAK,CAACR,QAAQ,GAAGQ,KAAK,CAACR,QAAQ,CAACU,MAAM,GAAGF,KAAK,CAACG,OAAO,CAAC;IACrE,IAAI;MACF,MAAMf,GAAG,CAACK,IAAI,CAAE,SAAQ,EAAE,CAAC,CAAC,EAAE;QAAEC,eAAe,EAAE;MAAK,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOU,YAAY,EAAE;MACrBd,OAAO,CAACU,KAAK,CAAC,SAAS,EAAEI,YAAY,CAAC;IACxC;;IAEA;IACAC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,cAAc,CAAC,CAAC;IACrD,MAAMP,KAAK,CAAC,CAAC;EACf;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}